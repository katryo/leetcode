from collections import defaultdict
from collections import Counter


class Solution:
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """

        N = len(graph)
        colors = {}
        color = 0

        def dfs(node, color):
            colors[node] = color
            for nei, adj in enumerate(graph[node]):
                if adj and nei not in colors:
                    dfs(nei, color)

        for node in range(N):
            if node not in colors:
                dfs(node, color)
                color += 1

        size = Counter(colors.values())

        color_count = Counter()
        for node in initial:
            color_count[colors[node]] += 1

        ans = float('inf')
        for x in initial:
            c = colors[x]
            if color_count[c] == 1:
                if ans == float('inf'):
                    ans = x
                elif size[c] > size[colors[ans]]:
                    ans = x
                elif size[c] == size[colors[ans]] and x < ans:
                    ans = x

        return ans if ans < float('inf') else min(initial)


s = Solution()
print(s.minMalwareSpread([[1,1,0],[1,1,0],[0,0,1]], [0,1]))
print(s.minMalwareSpread([[1,0,0],[0,1,0],[0,0,1]], [0,2]))
print(s.minMalwareSpread([[1,1,1],[1,1,1],[1,1,1]], [1,2]))
